
Нажмите комбинацию клавиш Ctrl + K, Ctrl + C. Это закомментирует все выбранные строки.

Если вы хотите раскомментировать строки, вы можете использовать комбинацию клавиш Ctrl + K, Ctrl + U.

В JavaScript есть три основных функции для взаимодействия с пользователем через диалоговые окна:



1. `let a = 1;`
   - **Тип данных**: Число (Number)
   - **Описание**: Переменная `a` объявлена и инициализирована значением `1`.

2. `let b = 'ddd';`
   - **Тип данных**: Строка (String)
   - **Описание**: Переменная `b` объявлена и инициализирована строкой `'ddd'`.

3. `let c = true;`
   - **Тип данных**: Логическое значение (Boolean)
   - **Описание**: Переменная `c` объявлена и инициализирована значением `true`.

4. `let d = null;`
   - **Тип данных**: Null
   - **Описание**: Переменная `d` объявлена и инициализирована значением `null`, что означает отсутствие значения.

5. `let i = undefined;`
   - **Тип данных**: Undefined
   - **Описание**: Переменная `i` объявлена, но не инициализирована, поэтому имеет значение `undefined`.

6. `let s = Symbol(2);`
   - **Тип данных**: Символ (Symbol)
   - **Описание**: Переменная `s` объявлена и инициализирована символом с описанием `2`. 
   Символы уникальны и используются для создания уникальных идентификаторов.

7. `let v = BigInt(44444);`
   - **Тип данных**: BigInt
   - **Описание**: Переменная `v` объявлена и инициализирована большим целым числом `44444`. 
   BigInt используется для работы с числами, которые выходят за пределы безопасного диапазона чисел в JavaScript.



1. **`alert`**:
   - Используется для отображения простого сообщения пользователю. Это модальное окно с одной кнопкой "OK".
   ```javascript
   alert("Это сообщение!");
   ```

2. **`confirm`**:
   - Используется для отображения сообщения с двумя кнопками: "OK" и "Cancel". Возвращает `true`, 
   если пользователь нажал "OK", и `false`, если "Cancel".
   ```javascript
   let result = confirm("Вы уверены?");
   console.log(result); // true или false
   ```

3. **`prompt`**:
   - Используется для запроса ввода от пользователя. Возвращает введенное значение в виде строки или `null`,
    если пользователь нажал "Cancel".
   ```javascript
   let userInput = prompt("Введите ваше имя:");
   console.log(userInput); // введенное значение или null
   ```



`typeof` в JavaScript используется для определения типа данных переменной или значения. 
Он возвращает строку, указывающую тип операнда. Вот несколько примеров:

- **`typeof 42`** возвращает `"number"`.
- **`typeof "Hello"`** возвращает `"string"`.
- **`typeof true`** возвращает `"boolean"`.
- **`typeof undefined`** возвращает `"undefined"`.
- **`typeof null`** возвращает `"object"` (это историческая ошибка в JavaScript, но так и осталось).
- **`typeof {}`** возвращает `"object"`.
- **`typeof function() {}`** возвращает `"function"`.

Это полезно, когда вам нужно проверить тип переменной перед выполнением каких-либо операций с ней. 

&& = и то и это
|| либо левое либо проавое
=== строгое равенство
!=  не равняеться 
* умнож
** приведения в степень
%  используется для вычисления остатка от деления одного числа на другое.(5 % 2 вернет 1, потому что 5 делится на 2 с остатком 1.)

if-else проверяет логические выражения и
 может использоваться для проверки различных типов данных (числа, строки, логические значения и т.д.).
if (condition1) {
  // код для выполнения, если condition1 истинно
} else if (condition2) {
  // код для выполнения, если condition2 истинно
} else {
  // код для выполнения, если все условия ложны
}

switch может быть более читаемым и удобным для понимания, 
когда у вас есть много условий, которые нужно проверить на равенство.
switch (expression) {
  case value1:
    // код для выполнения, если expression равно value1
    break;
  case value2:
    // код для выполнения, если expression равно value2
    break;
  default:
    // код для выполнения, если ни одно из значений не совпадает
}

length - используется для определения длины строки
возвращает количество символов в строке, включая пробелы и знаки препинания

for...in:
Итерация по  свойствам из его прототипа.
Обычно используется для итерации по ключам (именам свойств) объекта.
Не рекомендуется использовать для массивов, так как он может итерировать по
неиндексированным свойствам и не гарантирует порядок итерации.

for...of:
Итерация по  массивам, строки, карты, множества и т.д.
Итерация по значениям, а не по ключам.
Нельзя использовать для обычных объектов напрямую,
так как они не являются итерируемыми, если не реализуют протокол итерации.

continue - просто пропускает оставшуюся часть текущей итерации и 
продолжает выполнение цикла с следующей итерации.

 break - остановка цикла.
